[{"D:\\projekti\\pharma-app\\app\\src\\index.js":"1","D:\\projekti\\pharma-app\\app\\src\\reportWebVitals.js":"2","D:\\projekti\\pharma-app\\app\\src\\App.js":"3","D:\\projekti\\pharma-app\\app\\src\\components\\login\\Login.js":"4","D:\\projekti\\pharma-app\\app\\src\\components\\brand-select\\BrandSelect.js":"5","D:\\projekti\\pharma-app\\app\\src\\components\\nav\\Nav.js":"6","D:\\projekti\\pharma-app\\app\\src\\utils\\functions\\callApi.js":"7","D:\\projekti\\pharma-app\\app\\src\\utils\\popup\\Popup.js":"8","D:\\projekti\\pharma-app\\app\\src\\utils\\functions\\activeNavButtonChange.js":"9","D:\\projekti\\pharma-app\\app\\src\\utils\\popup\\components\\components.js":"10","D:\\projekti\\pharma-app\\app\\src\\utils\\popup\\components\\Success.js":"11","D:\\projekti\\pharma-app\\app\\src\\utils\\popup\\components\\AddIndication.js":"12","D:\\projekti\\pharma-app\\app\\src\\utils\\popup\\components\\AddBrand.js":"13","D:\\projekti\\pharma-app\\app\\src\\utils\\popup\\components\\add-note-warning\\AddNoteWarning.js":"14","D:\\projekti\\pharma-app\\app\\src\\utils\\popup\\components\\add-note-warning\\AddWarning.js":"15","D:\\projekti\\pharma-app\\app\\src\\utils\\popup\\components\\add-note-warning\\AddNote.js":"16","D:\\projekti\\pharma-app\\app\\src\\utils\\functions\\handleAccordionClick.js":"17","D:\\projekti\\pharma-app\\app\\src\\utils\\popup\\components\\manage-activities\\ManageActivities.js":"18","D:\\projekti\\pharma-app\\app\\src\\utils\\popup\\components\\manage-activities\\components\\AddEditActivity.js":"19","D:\\projekti\\pharma-app\\app\\src\\utils\\popup\\components\\manage-activities\\components\\ReOrderActivities.js":"20","D:\\projekti\\pharma-app\\app\\src\\utils\\popup\\components\\delete\\Delete.js":"21","D:\\projekti\\pharma-app\\app\\src\\components\\brand-select\\functions\\getBrandsData.js":"22","D:\\projekti\\pharma-app\\app\\src\\components\\timeline\\Timeline.js":"23","D:\\projekti\\pharma-app\\app\\src\\components\\timeline\\components\\WarningPopup.js":"24","D:\\projekti\\pharma-app\\app\\src\\components\\timeline\\functions\\getData.js":"25","D:\\projekti\\pharma-app\\app\\src\\components\\timeline\\components\\NotePopup.js":"26","D:\\projekti\\pharma-app\\app\\src\\components\\timeline\\components\\Activities.js":"27","D:\\projekti\\pharma-app\\app\\src\\components\\timeline\\functions\\getNotes.js":"28","D:\\projekti\\pharma-app\\app\\src\\components\\timeline\\functions\\getMonthOrder.js":"29","D:\\projekti\\pharma-app\\app\\src\\components\\timeline\\functions\\showCountries.js":"30","D:\\projekti\\pharma-app\\app\\src\\components\\knowledge-repository\\KnowledgeRepository.js":"31","D:\\projekti\\pharma-app\\app\\src\\components\\timeline\\functions\\months.js":"32","D:\\projekti\\pharma-app\\app\\src\\utils\\functions\\utilData.js":"33","D:\\projekti\\pharma-app\\app\\src\\components\\knowledge-repository\\functions\\highlightSearchStatement.js":"34","D:\\projekti\\pharma-app\\app\\src\\components\\knowledge-repository\\components\\question-answer\\QuestionAnswer.js":"35","D:\\projekti\\pharma-app\\app\\src\\components\\knowledge-repository\\components\\question-answer\\components\\TableHeaders.js":"36","D:\\projekti\\pharma-app\\app\\src\\components\\knowledge-repository\\components\\question-answer\\functions\\getAnswers.js":"37","D:\\projekti\\pharma-app\\app\\src\\components\\knowledge-repository\\components\\document-repository\\DocumentRepository.js":"38","D:\\projekti\\pharma-app\\app\\src\\utils\\popup\\components\\AddAnswer.js":"39","D:\\projekti\\pharma-app\\app\\src\\utils\\components\\CustomSelect.js":"40","D:\\projekti\\pharma-app\\app\\src\\utils\\functions\\removeItemFromArray.js":"41","D:\\projekti\\pharma-app\\app\\src\\utils\\functions\\downloadFile.js":"42","D:\\projekti\\pharma-app\\app\\src\\components\\knowledge-repository\\components\\Components.js":"43","D:\\projekti\\pharma-app\\app\\src\\components\\knowledge-repository\\components\\question-answer\\components\\SimilarQuestion.js":"44","D:\\projekti\\pharma-app\\app\\src\\components\\knowledge-repository\\components\\question-answer\\components\\Sources.js":"45","D:\\projekti\\pharma-app\\app\\src\\components\\knowledge-repository\\components\\question-answer\\components\\AddAnswer.js":"46","D:\\projekti\\pharma-app\\app\\src\\components\\knowledge-repository\\components\\question-answer\\components\\Answers.js":"47","D:\\projekti\\pharma-app\\app\\src\\components\\knowledge-repository\\components\\question-answer\\components\\AnswerPopup.js":"48","D:\\projekti\\pharma-app\\app\\src\\components\\knowledge-repository\\components\\document-repository\\components\\TableHeaders.js":"49","D:\\projekti\\pharma-app\\app\\src\\utils\\popup\\components\\add-documents\\AddDocuments.js":"50","D:\\projekti\\pharma-app\\app\\src\\utils\\popup\\components\\add-documents\\functions\\getTitleFromRtfFile.js":"51","D:\\projekti\\pharma-app\\app\\src\\utils\\popup\\components\\add-documents\\functions\\processTitleData.js":"52","D:\\projekti\\pharma-app\\app\\src\\components\\knowledge-repository\\components\\document-repository\\components\\Documents.js":"53","D:\\projekti\\pharma-app\\app\\src\\components\\knowledge-repository\\components\\document-repository\\functions\\getDocuments.js":"54","D:\\projekti\\pharma-app\\app\\src\\utils\\functions\\readFileSync.js":"55","D:\\projekti\\pharma-app\\app\\src\\utils\\popup\\components\\FilePreview.js":"56"},{"size":478,"mtime":1608213729791,"results":"57","hashOfConfig":"58"},{"size":362,"mtime":499162500000,"results":"59","hashOfConfig":"58"},{"size":4164,"mtime":1636036389423,"results":"60","hashOfConfig":"58"},{"size":1823,"mtime":1633683701914,"results":"61","hashOfConfig":"58"},{"size":5768,"mtime":1639833791248,"results":"62","hashOfConfig":"58"},{"size":4309,"mtime":1636188610539,"results":"63","hashOfConfig":"58"},{"size":635,"mtime":1636981318437,"results":"64","hashOfConfig":"58"},{"size":991,"mtime":1634648212515,"results":"65","hashOfConfig":"58"},{"size":520,"mtime":1636885070524,"results":"66","hashOfConfig":"58"},{"size":634,"mtime":1638224875644,"results":"67","hashOfConfig":"58"},{"size":549,"mtime":1635504127384,"results":"68","hashOfConfig":"58"},{"size":1508,"mtime":1639848994438,"results":"69","hashOfConfig":"58"},{"size":2784,"mtime":1639848902699,"results":"70","hashOfConfig":"58"},{"size":1674,"mtime":1635500513745,"results":"71","hashOfConfig":"58"},{"size":1759,"mtime":1635500961266,"results":"72","hashOfConfig":"58"},{"size":2073,"mtime":1636191026105,"results":"73","hashOfConfig":"58"},{"size":339,"mtime":1637501100533,"results":"74","hashOfConfig":"58"},{"size":1786,"mtime":1635500513745,"results":"75","hashOfConfig":"58"},{"size":1464,"mtime":1636191903444,"results":"76","hashOfConfig":"58"},{"size":1330,"mtime":1636191910145,"results":"77","hashOfConfig":"58"},{"size":1142,"mtime":1635500513745,"results":"78","hashOfConfig":"58"},{"size":849,"mtime":1635335698130,"results":"79","hashOfConfig":"58"},{"size":6488,"mtime":1636980613213,"results":"80","hashOfConfig":"58"},{"size":1453,"mtime":1637504667069,"results":"81","hashOfConfig":"58"},{"size":1846,"mtime":1635503341609,"results":"82","hashOfConfig":"58"},{"size":1470,"mtime":1637504662952,"results":"83","hashOfConfig":"58"},{"size":3386,"mtime":1636195687278,"results":"84","hashOfConfig":"58"},{"size":1011,"mtime":1635507995435,"results":"85","hashOfConfig":"58"},{"size":330,"mtime":1634420415098,"results":"86","hashOfConfig":"58"},{"size":766,"mtime":1636188805195,"results":"87","hashOfConfig":"58"},{"size":3362,"mtime":1637504059656,"results":"88","hashOfConfig":"58"},{"size":264,"mtime":1636195667383,"results":"89","hashOfConfig":"58"},{"size":16478,"mtime":1636195765029,"results":"90","hashOfConfig":"58"},{"size":528,"mtime":1638025607281,"results":"91","hashOfConfig":"58"},{"size":1032,"mtime":1638021287935,"results":"92","hashOfConfig":"58"},{"size":991,"mtime":1638018340760,"results":"93","hashOfConfig":"58"},{"size":651,"mtime":1638021799698,"results":"94","hashOfConfig":"58"},{"size":965,"mtime":1638021476171,"results":"95","hashOfConfig":"58"},{"size":4561,"mtime":1637063425675,"results":"96","hashOfConfig":"58"},{"size":2769,"mtime":1637503521169,"results":"97","hashOfConfig":"58"},{"size":275,"mtime":1626094877040,"results":"98","hashOfConfig":"58"},{"size":374,"mtime":1637072672067,"results":"99","hashOfConfig":"58"},{"size":480,"mtime":1637498919783,"results":"100","hashOfConfig":"58"},{"size":522,"mtime":1637505764490,"results":"101","hashOfConfig":"58"},{"size":534,"mtime":1637504365074,"results":"102","hashOfConfig":"58"},{"size":5067,"mtime":1637515397574,"results":"103","hashOfConfig":"58"},{"size":3735,"mtime":1638229807840,"results":"104","hashOfConfig":"58"},{"size":2251,"mtime":1637516073483,"results":"105","hashOfConfig":"58"},{"size":708,"mtime":1638018344408,"results":"106","hashOfConfig":"58"},{"size":3201,"mtime":1638024517353,"results":"107","hashOfConfig":"58"},{"size":703,"mtime":1638018687297,"results":"108","hashOfConfig":"58"},{"size":2015,"mtime":1638024306733,"results":"109","hashOfConfig":"58"},{"size":2216,"mtime":1638025678834,"results":"110","hashOfConfig":"58"},{"size":584,"mtime":1638025396918,"results":"111","hashOfConfig":"58"},{"size":287,"mtime":1638023733256,"results":"112","hashOfConfig":"58"},{"size":886,"mtime":1638234376865,"results":"113","hashOfConfig":"58"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},"dvodj5",{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"116"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"116"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"116"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"116"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"116"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"116"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214","usedDeprecatedRules":"116"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217","usedDeprecatedRules":"116"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230","usedDeprecatedRules":"116"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},"D:\\projekti\\pharma-app\\app\\src\\index.js",[],["237","238"],"D:\\projekti\\pharma-app\\app\\src\\reportWebVitals.js",[],"D:\\projekti\\pharma-app\\app\\src\\App.js",[],"D:\\projekti\\pharma-app\\app\\src\\components\\login\\Login.js",[],"D:\\projekti\\pharma-app\\app\\src\\components\\brand-select\\BrandSelect.js",["239"],"import React, { useEffect, useState } from 'react';\r\n\r\nimport Popup from '../../utils/popup/Popup';\r\n\r\nimport activeNavButtonChange from '../../utils/functions/activeNavButtonChange';\r\nimport getBrandsData from './functions/getBrandsData';\r\n\r\nimport './BrandSelect.css';\r\n\r\nfunction BrandSelect(props) {\r\n    const [brandsData, setBrandsData] = useState([]);\r\n    const [state, setState] = useState({\r\n        show: false,\r\n        method: \"\",\r\n        brandId: \"\",\r\n        popup: {},\r\n        refresh: false\r\n    });\r\n    const { changeState } = props;\r\n\r\n    useEffect(() => {\r\n        activeNavButtonChange(\"brand-select\");\r\n        getBrandsData(setBrandsData);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if(state.refresh) {\r\n            getBrandsData(setBrandsData);\r\n\r\n            setState({\r\n                ...state,\r\n                refresh: false\r\n            });\r\n        }\r\n    }, [state.refresh]);\r\n\r\n    const showIndications = (e) => {\r\n        e.target.nextSibling.classList.toggle(\"hide\");\r\n    }\r\n\r\n    return (\r\n        <div id=\"brand-select\">\r\n            <div className=\"title_cont\"><h2>Choose Your Brand</h2></div>\r\n\r\n            <div className=\"brands\">\r\n                {brandsData.map(brand => (\r\n                    <div key={brand.id} className=\"brand-container\">\r\n                        <h4 className=\"brand-name\">{brand.name}</h4>\r\n                        <div\r\n                            className=\"brand img\"\r\n                            onClick={showIndications}\r\n                            style={brand.thumbnail ? {\r\n                                backgroundImage: `url(${brand.thumbnail})`\r\n                            } : {}}\r\n                        >\r\n                            <span\r\n                                className=\"delete\"\r\n                                onClick={(e) => {\r\n                                    e.stopPropagation();\r\n                                    setState({\r\n                                        show: true,\r\n                                        method: \"Delete\",\r\n                                        brandId: brand.id,\r\n                                        popup: {\r\n                                            title: `brand: '${brand.name}' and all it's indications?`,\r\n                                            endpoint: \"administration/deleteBrand\",\r\n                                            id: brand.id\r\n                                        }\r\n                                    });\r\n                                }}\r\n                            ><i className=\"fas fa-times-circle\" /></span>\r\n                        </div>\r\n                        \r\n\r\n                        <div className=\"indications hide\">\r\n                            {brand.indications.map(indication => (\r\n                                <div\r\n                                    key={indication.id}\r\n                                    className=\"indication\"\r\n                                    onClick={() => changeState(\r\n                                        {\r\n                                            brandId: brand.id,\r\n                                            brandThumbnail: brand.thumbnail,\r\n                                            indicationId: indication.id,\r\n                                            indications: brand.indications\r\n                                        },\r\n                                        \"/activity-timeline\"\r\n                                    )}\r\n                                >\r\n                                    {indication.name}\r\n                                    <span\r\n                                        className=\"delete\"\r\n                                        onClick={(e) => {\r\n                                            e.stopPropagation();\r\n                                            setState({\r\n                                                show: true,\r\n                                                method: \"Delete\",\r\n                                                brandId: brand.id,\r\n                                                popup: {\r\n                                                    title: `indication: '${indication.name}' and all it's activities?`,\r\n                                                    endpoint: \"administration/deleteIndication\",\r\n                                                    id: indication.id\r\n                                                }\r\n                                            });\r\n                                        }}\r\n                                    ><i className=\"fas fa-times-circle\"></i></span>\r\n                                </div>\r\n                            ))}\r\n\r\n                            <div\r\n                                className=\"indication add-indication\"\r\n                                onClick={() => setState({\r\n                                    show: true,\r\n                                    method: \"AddIndication\",\r\n                                    brandId: brand.id\r\n                                })}\r\n                            >+</div>\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n                <div\r\n                    id=\"add-brand\"\r\n                    className=\"brand\"\r\n                    onClick={() => setState({\r\n                        ...state,\r\n                        show: true,\r\n                        method: \"AddBrand\"\r\n                    })}\r\n                >\r\n                    <span>+</span>\r\n                </div>\r\n\r\n                <Popup\r\n                    state={state}\r\n                    setState={setState}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default BrandSelect;\r\n","D:\\projekti\\pharma-app\\app\\src\\components\\nav\\Nav.js",["240"],"import React, { useState } from 'react';\r\nimport { useEffect } from 'react';\r\nimport { Link, Redirect } from 'react-router-dom';\r\n\r\nimport handleAccordionClick from '../../utils/functions/handleAccordionClick';\r\n\r\nimport './Nav.css';\r\n\r\nexport default function Nav({\r\n    user,\r\n    indications,\r\n    indicationId,\r\n    brandThumbnail,\r\n    setSessionData,\r\n    changeState\r\n}) {\r\n    const [redirect, setRedirect] = useState(null);\r\n    const [state, setState] = useState({\r\n        currentIndication: null,\r\n        availableIndications: []\r\n    });\r\n\r\n    const logOut = () => {\r\n        sessionStorage.removeItem(\"userData\");\r\n        setSessionData({ isLoggedIn: false, userData: null });\r\n        setRedirect(<Redirect to=\"/login\" />);\r\n    }\r\n\r\n    useEffect(() => {\r\n        let availableIndications = [...indications];\r\n        let index = availableIndications.findIndex(i => i.id === indicationId);\r\n        let currentIndication = null;\r\n\r\n        if(index !== -1) {\r\n            currentIndication = availableIndications[index];\r\n            availableIndications.splice(index, 1);\r\n        }\r\n        \r\n        setState({\r\n            currentIndication,\r\n            availableIndications\r\n        });\r\n    }, [indicationId]);\r\n\r\n    return (\r\n        <div id=\"navigation\">\r\n            {redirect}\r\n            <div id=\"upper-nav\">\r\n                <div\r\n                    id=\"logo\"\r\n                    onClick={() => changeState({\r\n                        brandId: \"\",\r\n                        indicationId: \"\",\r\n                        indications: [],\r\n                        brandThumbnail: null,\r\n                    })}\r\n                >\r\n                    <Link to=\"/\">\r\n                        <img\r\n                            src={brandThumbnail}\r\n                            alt=\"brand-logo\"\r\n                            style={{visibility: brandThumbnail ? \"initial\" : \"hidden\"}}\r\n                        />\r\n                    </Link>\r\n                </div>\r\n\r\n                {indicationId && state.currentIndication ? (\r\n                    <div id=\"indications\">\r\n                        <div\r\n                            className=\"current-indication accordion-toggle\"\r\n                            onClick={handleAccordionClick}\r\n                            style={{pointerEvents: state.availableIndications.length > 0 ? \"initial\" : \"none\"}}\r\n                        >\r\n                            {state.currentIndication.name}\r\n                            {state.availableIndications.length > 0 ? (\r\n                                <i className=\"fas fa-chevron-down arrow\" />\r\n                            ) : null}\r\n                        </div>\r\n                        \r\n                        <div id=\"indications-dropdown\" className=\"accordion-body hide\">\r\n                            {state.availableIndications.map(indication => (\r\n                                <div key={indication.id} className=\"indication\">{indication.name}</div>\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n                ) : null}\r\n\r\n                <div id=\"user-info\">\r\n                    <div\r\n                        className=\"accordion-toggle\"\r\n                        onClick={handleAccordionClick}\r\n                    >\r\n                        <i className=\"fas fa-user\" /> | {user.displayName}\r\n                        <i className=\"fas fa-chevron-down arrow\" />\r\n                    </div>\r\n                    <div id=\"user-info-dropdown\" className=\"accordion-body hide\">\r\n                        <button\r\n                            className=\"menu-link log-out\"\r\n                            onClick={() => logOut()}\r\n                        >\r\n                            Log Out <i className=\"fas fa-sign-out-alt\" />\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            {indicationId ? (\r\n                <nav id=\"bottom-nav\">\r\n                    <Link className=\"menu-link\" id=\"activity-timeline\" to=\"/activity-timeline\">Activity Timeline</Link>\r\n                    <Link className=\"menu-link\" id=\"knowledge-repository\" to=\"/knowledge-repository\">Knowledge Repository</Link>\r\n                </nav>\r\n            ) : null}\r\n        </div>\r\n    );\r\n};\r\n","D:\\projekti\\pharma-app\\app\\src\\utils\\functions\\callApi.js",[],"D:\\projekti\\pharma-app\\app\\src\\utils\\popup\\Popup.js",[],"D:\\projekti\\pharma-app\\app\\src\\utils\\functions\\activeNavButtonChange.js",[],"D:\\projekti\\pharma-app\\app\\src\\utils\\popup\\components\\components.js",[],"D:\\projekti\\pharma-app\\app\\src\\utils\\popup\\components\\Success.js",[],"D:\\projekti\\pharma-app\\app\\src\\utils\\popup\\components\\AddIndication.js",[],"D:\\projekti\\pharma-app\\app\\src\\utils\\popup\\components\\AddBrand.js",[],"D:\\projekti\\pharma-app\\app\\src\\utils\\popup\\components\\add-note-warning\\AddNoteWarning.js",[],"D:\\projekti\\pharma-app\\app\\src\\utils\\popup\\components\\add-note-warning\\AddWarning.js",[],"D:\\projekti\\pharma-app\\app\\src\\utils\\popup\\components\\add-note-warning\\AddNote.js",[],"D:\\projekti\\pharma-app\\app\\src\\utils\\functions\\handleAccordionClick.js",[],"D:\\projekti\\pharma-app\\app\\src\\utils\\popup\\components\\manage-activities\\ManageActivities.js",[],"D:\\projekti\\pharma-app\\app\\src\\utils\\popup\\components\\manage-activities\\components\\AddEditActivity.js",[],"D:\\projekti\\pharma-app\\app\\src\\utils\\popup\\components\\manage-activities\\components\\ReOrderActivities.js",[],"D:\\projekti\\pharma-app\\app\\src\\utils\\popup\\components\\delete\\Delete.js",[],"D:\\projekti\\pharma-app\\app\\src\\components\\brand-select\\functions\\getBrandsData.js",[],"D:\\projekti\\pharma-app\\app\\src\\components\\timeline\\Timeline.js",["241","242","243"],"import React, { useEffect, useState } from 'react';\r\nimport { Redirect } from 'react-router';\r\n\r\nimport Popup from '../../utils/popup/Popup';\r\nimport Activities from './components/Activities';\r\nimport NotePopup from './components/NotePopup';\r\n\r\nimport months from './functions/months';\r\nimport getMonthOrder from './functions/getMonthOrder';\r\nimport activeNavButtonChange from '../../utils/functions/activeNavButtonChange';\r\n\r\nimport './Timeline.css';\r\nimport getData from './functions/getData';\r\nimport WarningPopup from './components/WarningPopup';\r\nimport getNotes from './functions/getNotes';\r\nimport showCountries from './functions/showCountries';\r\n//TODO add redirect when brandId and indicationId are not set up (maybe put it in session storage)\r\nconst currentMonth = new Date().getMonth() + 1;\r\nconst year = new Date().getFullYear();\r\n\r\nfunction Timeline({brandId, indicationId, user}) {\r\n    const [monthOrder, setMonthOrder] = useState([]);\r\n    const [state, setState] = useState({\r\n        show: false,\r\n        method: \"\",\r\n        activity: undefined,\r\n        warning: undefined,\r\n        activityId: undefined,\r\n        refresh: false,\r\n        year: year,\r\n        countriesShow: 1\r\n    });\r\n    const [redirect, setRedirect] = useState(null);\r\n    const [data, setData] = useState({\r\n        activities: [],\r\n        notes: {},\r\n    });\r\n    const initData = {\r\n        country: {name: \"Croatia\", id: 42},\r\n        month: months[currentMonth],\r\n        year: year,\r\n        brandId: brandId,\r\n        indicationId: indicationId,\r\n        username: user.displayName\r\n    };\r\n\r\n    useEffect(() => {\r\n        if(brandId === \"\" || indicationId === \"\") setRedirect(<Redirect to=\"/\" />);\r\n        activeNavButtonChange(\"activity-timeline\");\r\n        setMonthOrder(getMonthOrder(1));\r\n\r\n        getData(\r\n            initData.brandId,\r\n            initData.indicationId,\r\n            state.year,\r\n            setData\r\n        );\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if(state.refresh) {\r\n            getData(\r\n                initData.brandId,\r\n                initData.indicationId,\r\n                state.year,\r\n                setData\r\n            );\r\n\r\n            setState({\r\n                ...state,\r\n                refresh: false\r\n            });\r\n        }\r\n    }, [state.refresh]);\r\n\r\n    useEffect(() => {\r\n        if(data.activities.length > 0) {\r\n            async function refreshNotes() {\r\n                console.log(\"new notes\");\r\n                const notes = await getNotes(\r\n                    initData.brandId,\r\n                    initData.indicationId,\r\n                    state.year,\r\n                    data.activities.map(a => a.id)\r\n                );\r\n    \r\n                setData({\r\n                    ...data,\r\n                    notes\r\n                });\r\n            }\r\n    \r\n            refreshNotes();\r\n        }\r\n    }, [state.year]);\r\n\r\n    const changeState = (object) => {\r\n        setState({\r\n            ...state,\r\n            ...object\r\n        });\r\n    }\r\n    \r\n    return (\r\n        <div id=\"timeline\" className=\"page-container\">\r\n            <div className=\"content-contaiener\">\r\n                {redirect}\r\n                \r\n                <div className=\"buttons-container\">\r\n                    <button\r\n                        className=\"button button-primary\"\r\n                        onClick={(e) => {\r\n                            showCountries(e, state.countriesShow);\r\n                            changeState({countriesShow: state.countriesShow * -1});\r\n                        }}\r\n                    >{state.countriesShow === 1 ? \"Show\" : \"Hide\"} Countries</button>\r\n                </div>\r\n\r\n                <div id=\"year-container\">\r\n                    <span\r\n                        className=\"pointer\"\r\n                        onClick={() => setState({\r\n                            ...state,\r\n                            year: state.year - 1\r\n                        })}\r\n                    ><i className=\"fas fa-chevron-left\" /></span>\r\n                    {state.year}\r\n                    <span\r\n                        className=\"pointer\"\r\n                        onClick={() => setState({\r\n                            ...state,\r\n                            year: state.year + 1\r\n                        })}\r\n                    ><i className=\"fas fa-chevron-right\" /></span>\r\n                </div>\r\n                <div id=\"table\">\r\n                    <div id=\"table-headers\" className=\"table-row\">\r\n                        <div className=\"table-column activity\">\r\n                            <span>Activity</span>\r\n                            <div className=\"activity-actions\">\r\n                                <span\r\n                                    className=\"add\"\r\n                                    onClick={() => changeState({\r\n                                        show: true,\r\n                                        method: \"ManageActivities\"\r\n                                    })}\r\n                                ><i className=\"fas fa-edit\" /></span>\r\n                            </div>\r\n                        </div>\r\n                        {monthOrder.map(id => (\r\n                            <div key={id} className=\"table-column\">\r\n                                <span>{months[id]}</span>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                    <div id=\"table-rows\">\r\n                        <Activities\r\n                            data={data}\r\n                            initData={initData}\r\n                            monthOrder={monthOrder}\r\n                            changeState={changeState}\r\n                        />\r\n                    </div>\r\n                </div>\r\n\r\n                {state.note ? (\r\n                    <NotePopup\r\n                        note={state.note}\r\n                        changeState={changeState}\r\n                    />\r\n                ) : null}\r\n\r\n                {state.warning ? (\r\n                    <WarningPopup\r\n                        warning={state.warning}\r\n                        changeState={changeState}\r\n                    />\r\n                ) : null}\r\n\r\n                <Popup\r\n                    state={state}\r\n                    setState={setState}\r\n                    initData={initData}\r\n                    activities={data.activities}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Timeline;\r\n","D:\\projekti\\pharma-app\\app\\src\\components\\timeline\\components\\WarningPopup.js",[],"D:\\projekti\\pharma-app\\app\\src\\components\\timeline\\functions\\getData.js",[],"D:\\projekti\\pharma-app\\app\\src\\components\\timeline\\components\\NotePopup.js",[],"D:\\projekti\\pharma-app\\app\\src\\components\\timeline\\components\\Activities.js",[],"D:\\projekti\\pharma-app\\app\\src\\components\\timeline\\functions\\getNotes.js",[],"D:\\projekti\\pharma-app\\app\\src\\components\\timeline\\functions\\getMonthOrder.js",[],"D:\\projekti\\pharma-app\\app\\src\\components\\timeline\\functions\\showCountries.js",[],"D:\\projekti\\pharma-app\\app\\src\\components\\knowledge-repository\\KnowledgeRepository.js",["244"],"import React, { useEffect, useState } from 'react';\r\nimport { Redirect } from 'react-router';\r\n\r\nimport Popup from '../../utils/popup/Popup';\r\nimport Components from './components/Components';\r\n\r\nimport activeNavButtonChange from '../../utils/functions/activeNavButtonChange';\r\n\r\nimport './KnowledgeRepository.css';\r\n\r\nfunction KnowledgeRepository({brandId, indicationId, user}) {\r\n    const [redireect, setRedirect] = useState(null);\r\n    const [state, setState] = useState({\r\n        show: false,\r\n        method: \"\",\r\n        filters: {},\r\n        refresh: false,\r\n        component: \"QuestionAnswer\"\r\n    });\r\n    const initData = {\r\n        country: {name: \"Croatia\", id: 42},\r\n        brandId,\r\n        indicationId,\r\n        username: user.displayName\r\n    };\r\n\r\n    useEffect(() => {\r\n        if(brandId === \"\" || indicationId === \"\") setRedirect(<Redirect to=\"/\" />);\r\n        activeNavButtonChange(\"knowledge-repository\");\r\n    }, []);\r\n\r\n    const changeState = (object) => {\r\n        setState({\r\n            ...state,\r\n            ...object\r\n        });\r\n    }\r\n\r\n    const handleFilterChange = (e) => {\r\n        let filters = {...state.filters};\r\n\r\n        if(e.target.value !== \"\") filters[e.target.name] = e.target.value;\r\n        else delete filters[e.target.name];\r\n\r\n        changeState({filters});\r\n    }\r\n\r\n    const handleComponentChange = (e) => {\r\n        const buttons = e.target.parentElement.children;\r\n\r\n        for(let i = 0; i < buttons.length; i++) buttons[i].classList.remove(\"active\");\r\n        e.target.classList.add(\"active\");\r\n\r\n        changeState({component: e.target.dataset.component});\r\n    }\r\n\r\n    return (\r\n        <div id=\"knowledge-repository\" className=\"page-container\">\r\n            {redireect}\r\n            <div className=\"component-navigation-container\">\r\n                <button\r\n                    className=\"menu-link active\"\r\n                    data-component=\"QuestionAnswer\"\r\n                    onClick={handleComponentChange}\r\n                >Questions And Answers</button>\r\n                <button\r\n                    className=\"menu-link\"\r\n                    data-component=\"DocumentRepository\"\r\n                    onClick={handleComponentChange}\r\n                >Document Repository</button>\r\n            </div>\r\n\r\n            <div className=\"content-contaiener\">\r\n                <div id=\"search-container\" className=\"input-container\">\r\n                    <input type=\"search\" id=\"search\" name=\"search\" />\r\n                    <span\r\n                        id=\"search-icon\"\r\n                        onClick={() => handleFilterChange({\r\n                            target: document.getElementById(\"search\")\r\n                        })}\r\n                    >\r\n                        <i className=\"fas fa-search\" />\r\n                    </span>\r\n                </div>\r\n                \r\n                <Components\r\n                    component={state.component}\r\n                    initData={initData}\r\n                    filters={state.filters}\r\n                    refresh={state.refresh}\r\n                    changeState={changeState}\r\n                />\r\n            </div>\r\n\r\n            <Popup\r\n                state={state}\r\n                setState={setState}\r\n                initData={initData}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default KnowledgeRepository;\r\n","D:\\projekti\\pharma-app\\app\\src\\components\\timeline\\functions\\months.js",["245"],"export default {\r\n    \"1\": \"January\",\r\n    \"2\": \"February\",\r\n    \"3\": \"March\",\r\n    \"4\": \"April\",\r\n    \"5\": \"May\",\r\n    \"6\": \"June\",\r\n    \"7\": \"July\",\r\n    \"8\": \"August\",\r\n    \"9\": \"September\",\r\n    \"10\": \"October\",\r\n    \"11\": \"November\",\r\n    \"12\": \"December\"\r\n};","D:\\projekti\\pharma-app\\app\\src\\utils\\functions\\utilData.js",[],"D:\\projekti\\pharma-app\\app\\src\\components\\knowledge-repository\\functions\\highlightSearchStatement.js",[],["246","247"],"D:\\projekti\\pharma-app\\app\\src\\components\\knowledge-repository\\components\\question-answer\\QuestionAnswer.js",[],"D:\\projekti\\pharma-app\\app\\src\\components\\knowledge-repository\\components\\question-answer\\components\\TableHeaders.js",[],"D:\\projekti\\pharma-app\\app\\src\\components\\knowledge-repository\\components\\question-answer\\functions\\getAnswers.js",[],"D:\\projekti\\pharma-app\\app\\src\\components\\knowledge-repository\\components\\document-repository\\DocumentRepository.js",[],"D:\\projekti\\pharma-app\\app\\src\\utils\\popup\\components\\AddAnswer.js",["248"],"import React, { useEffect, useRef, useState } from 'react';\r\nimport getAnswers from '../../../components/knowledge-repository/components/question-answer/functions/getAnswers';\r\nimport CustomSelect from '../../components/CustomSelect';\r\n\r\nimport callApi from '../../functions/callApi';\r\nimport { countryList } from '../../functions/utilData';\r\n\r\nconst keys = Object.keys(countryList);\r\nlet today = new Date();\r\ntoday = `${today.getFullYear()}-${today.getMonth()}-${\r\n    today.getDate() < 10 ? \"0\" + today.getDate() : today.getDate()}`;\r\n\r\nfunction AddAnswer({state, setState, initData, closePopUp}) {\r\n    const [answers, setAnswers] = useState([]);\r\n    const inputRef = useRef(null);\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n\r\n        const formData = new FormData(e.target);\r\n        formData.append(\"path\", \"knowledge-repository/addAnswer\");\r\n        formData.append(\"brandId\", initData.brandId);\r\n        formData.append(\"indicationId\", initData.indicationId);\r\n        formData.append(\"username\", initData.username);\r\n\r\n        console.log(formData);\r\n    \r\n        const res = await callApi(\r\n            \"POST\",\r\n            \"shared/uploadFilesAndInsertData\",\r\n            formData,\r\n        );\r\n    \r\n        if(res) setState({\r\n            ...state,\r\n            method: \"Success\",\r\n            message: res\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        getAnswers(\r\n            initData.brandId,\r\n            initData.indicationId,\r\n            {},\r\n            (answers) => setAnswers(answers.map(a => {\r\n                return {id: a.id, text: a.question}\r\n            }))\r\n        );\r\n    }, []);\r\n\r\n    return (\r\n        <div id=\"add-answer\" className=\"popup-inner\">\r\n            <span\r\n                className=\"close can-close\"\r\n                onClick={closePopUp}\r\n            ><i className=\"fas fa-times-circle can-close\" /></span>\r\n\r\n            <h3>Add New Answer</h3>\r\n            \r\n            <form onSubmit={handleSubmit}  encType=\"multipart/form-data\">\r\n                <div className=\"input-container\">\r\n                    <label htmlFor=\"question\">Question:</label>\r\n                    <textarea name=\"question\"></textarea>\r\n                </div>\r\n\r\n                <div className=\"input-container\">\r\n                    <label htmlFor=\"answer\">Answer:</label>\r\n                    <textarea name=\"answer\"></textarea>\r\n                </div>\r\n\r\n                <div className=\"input-container\">\r\n                    <label htmlFor=\"answerDate\">Answer Date:</label>\r\n                    <input\r\n                        type=\"date\"\r\n                        name=\"answerDate\"\r\n                        defaultValue={today}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"input-container\">\r\n                    <label htmlFor=\"origin\">Name of Agency/country:</label>\r\n                    <select name=\"origin\" defaultValue=\"\">\r\n                        <option disabled value=\"\">Select Origin</option>\r\n                        {keys.map(key => (\r\n                            <option key={key} value={key}>{countryList[key].name}</option>\r\n                        ))}\r\n                    </select>\r\n                </div>\r\n\r\n                <div className=\"input-container\">\r\n                    <label htmlFor=\"category\">Category:</label>\r\n                    <input type=\"text\" name=\"category\" />\r\n                </div>\r\n\r\n                <div className=\"input-container\">\r\n                    <label htmlFor=\"similarQuestion\">Similar Question:</label>\r\n\r\n                    <CustomSelect\r\n                        items={answers}\r\n                        inputRef={inputRef}\r\n                    />\r\n\r\n                    <input\r\n                        ref={inputRef}\r\n                        type=\"text\"\r\n                        name=\"similarQuestion\"\r\n                        style={{display: \"none\"}}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"input-container\">\r\n                    <label htmlFor=\"source\">Source:</label>\r\n                    <input\r\n                        type=\"file\"\r\n                        name=\"files\"\r\n                        multiple={true}\r\n                    />\r\n                </div>\r\n                \r\n                <input\r\n                    type=\"submit\"\r\n                    className=\"button button-primary\"\r\n                    value=\"Submit\"\r\n                />\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AddAnswer;\r\n","D:\\projekti\\pharma-app\\app\\src\\utils\\components\\CustomSelect.js",[],"D:\\projekti\\pharma-app\\app\\src\\utils\\functions\\removeItemFromArray.js",[],"D:\\projekti\\pharma-app\\app\\src\\utils\\functions\\downloadFile.js",[],"D:\\projekti\\pharma-app\\app\\src\\components\\knowledge-repository\\components\\Components.js",[],"D:\\projekti\\pharma-app\\app\\src\\components\\knowledge-repository\\components\\question-answer\\components\\SimilarQuestion.js",[],"D:\\projekti\\pharma-app\\app\\src\\components\\knowledge-repository\\components\\question-answer\\components\\Sources.js",[],"D:\\projekti\\pharma-app\\app\\src\\components\\knowledge-repository\\components\\question-answer\\components\\AddAnswer.js",["249","250"],"import React, { useState, useEffect, useRef } from 'react';\r\n\r\nimport CustomSelect from '../../../../../utils/components/CustomSelect';\r\n\r\nimport getAnswers from '../functions/getAnswers';\r\nimport callApi from '../../../../../utils/functions/callApi';\r\nimport { countryList } from '../../../../../utils/functions/utilData';\r\n\r\nconst keys = Object.keys(countryList);\r\nlet today = new Date();\r\ntoday = `${today.getFullYear()}-${today.getMonth()}-${\r\n    today.getDate() < 10 ? \"0\" + today.getDate() : today.getDate()}`;\r\n\r\nfunction AddAnswer({initData, changeState, refresh}) {\r\n    const [answers, setAnswers] = useState([]);\r\n    const inputRef = useRef(null);\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n\r\n        const formData = new FormData(e.target);\r\n        formData.append(\"path\", \"knowledge-repository/addAnswer\");\r\n        formData.append(\"brandId\", initData.brandId);\r\n        formData.append(\"indicationId\", initData.indicationId);\r\n        formData.append(\"username\", initData.username);\r\n    \r\n        const res = await callApi(\r\n            \"POST\",\r\n            \"shared/uploadFilesAndInsertData\",\r\n            formData,\r\n        );\r\n    \r\n        if(res) changeState({\r\n            show: true,\r\n            method: \"Success\",\r\n            message: res\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        getAnswers(\r\n            initData.brandId,\r\n            initData.indicationId,\r\n            {},\r\n            (answers) => setAnswers(answers.map(a => {\r\n                return {id: a.id, text: a.question}\r\n            }))\r\n        );\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if(refresh) getAnswers(\r\n            initData.brandId,\r\n            initData.indicationId,\r\n            {},\r\n            (answers) => setAnswers(answers.map(a => {\r\n                return {id: a.id, text: a.question}\r\n            }))\r\n        );\r\n    }, [refresh]);\r\n\r\n    return (\r\n        <div id=\"add-answer\" className=\"table-row hide\">\r\n            <form\r\n                style={{\r\n                    display: \"flex\",\r\n                    width: \"100%\"\r\n                }}\r\n                encType=\"multipart/form-data\"\r\n                onSubmit={handleSubmit}\r\n            >\r\n                <div className=\"table-column question\">\r\n                    <div className=\"input-container\">\r\n                        <textarea name=\"question\"></textarea>\r\n                    </div>\r\n                </div>\r\n                <div className=\"table-column answer\">\r\n                    <div className=\"input-container\">\r\n                        <textarea name=\"answer\"></textarea>\r\n                    </div>\r\n                </div>\r\n                <div className=\"table-column date\">\r\n                    <div className=\"input-container\">\r\n                        <input\r\n                            type=\"date\"\r\n                            name=\"answerDate\"\r\n                            defaultValue={today}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className=\"table-column agency-country\">\r\n                    <div className=\"input-container\">\r\n                        <select name=\"origin\" defaultValue=\"\">\r\n                            <option disabled value=\"\">Select Origin</option>\r\n                            {keys.map(key => (\r\n                                <option key={key} value={key}>{countryList[key].name}</option>\r\n                            ))}\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n                <div className=\"table-column category\">\r\n                    <div className=\"input-container\">\r\n                        <input type=\"text\" name=\"category\" />\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"table-column similar-question\">\r\n                    <div className=\"input-container\">\r\n\r\n                        <CustomSelect\r\n                            items={answers}\r\n                            inputRef={inputRef}\r\n                        />\r\n\r\n                        <input\r\n                            ref={inputRef}\r\n                            type=\"text\"\r\n                            name=\"similarQuestion\"\r\n                            style={{display: \"none\"}}\r\n                        />\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"table-column sources\">\r\n                    <div className=\"input-container\" style={{marginBottom: \"0px\"}}>\r\n                        <input\r\n                            type=\"file\"\r\n                            name=\"files\"\r\n                            multiple={true}\r\n                        />\r\n                    </div>\r\n                    \r\n                    <input\r\n                        type=\"submit\"\r\n                        className=\"button button-primary\"\r\n                        value=\"Submit\"\r\n                    />\r\n                </div>\r\n            </form>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AddAnswer;\r\n","D:\\projekti\\pharma-app\\app\\src\\components\\knowledge-repository\\components\\question-answer\\components\\Answers.js",["251","252","253","254","255"],"import React, { useEffect, useRef, useState } from 'react';\r\n\r\nimport AddAnswer from './AddAnswer';\r\nimport SimilarQuestion from './SimilarQuestion';\r\nimport Sources from './Sources';\r\n\r\nimport downloadFile from '../../../../../utils/functions/downloadFile';\r\nimport { countryList } from '../../../../../utils/functions/utilData';\r\nimport getAnswers from '../functions/getAnswers';\r\nimport AnswerPopup from './AnswerPopup';\r\n\r\nfunction Answers({\r\n    initData,\r\n    filters,\r\n    refresh,\r\n    changeState\r\n}) {\r\n    const [answers, setAnswers] = useState([]);\r\n    const [answerId, setAnswerId] = useState(undefined);\r\n    const inputRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        getAnswers(\r\n            initData.brandId,\r\n            initData.indicationId,\r\n            filters,\r\n            setAnswers\r\n        );\r\n    }, [filters]);\r\n\r\n    useEffect(() => {\r\n        if(refresh) {\r\n            getAnswers(\r\n                initData.brandId,\r\n                initData.indicationId,\r\n                filters,\r\n                setAnswers\r\n            );\r\n\r\n            changeState({refresh: false});\r\n        }\r\n    }, [refresh]);\r\n\r\n    const downloadSource = (e) => {\r\n        /*downloadFile(\r\n            initData.brandId,\r\n            initData.indicationId,\r\n            \"answers\",\r\n            e.target.dataset.path,\r\n            e.target.dataset.filename\r\n        );*/\r\n\r\n        changeState({\r\n            show: true,\r\n            method: \"FilePreview\",\r\n            file: {\r\n                type: \"answers\",\r\n                path: e.target.dataset.path,\r\n                filename: e.target.dataset.filename\r\n            }\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div id=\"table-rows\">\r\n            <a\r\n                id=\"download\"\r\n                href=\"\"\r\n                ref={inputRef}\r\n                style={{display: \"none\"}}\r\n            />\r\n\r\n            <AddAnswer\r\n                initData={initData}\r\n                changeState={changeState}\r\n                refresh={refresh}\r\n            />\r\n\r\n            {answers.map(answer => (\r\n                <div key={answer.id} className=\"table-row\">\r\n                    <div className=\"table-column question\">\r\n                        <span\r\n                            data-content={answer.question}\r\n                        >{answer.question}</span>\r\n                    </div>\r\n                    <div className=\"table-column answer\">\r\n                        <span\r\n                            data-content={answer.answer}\r\n                        >{answer.answer}</span>\r\n                    </div>\r\n                    <div className=\"table-column date\">\r\n                        <span>{answer.answer_date.split(\"T\")[0]}</span>\r\n                    </div>\r\n                    <div className=\"table-column agency-country\">\r\n                        <span>{countryList[answer.origin].name}</span>\r\n                    </div>\r\n                    <div className=\"table-column category\">\r\n                        <span>{answer.category}</span>\r\n                    </div>\r\n                    <SimilarQuestion\r\n                        similarQuestions={answer.similar_question}\r\n                        setAnswerId={setAnswerId}\r\n                    />\r\n                    <Sources\r\n                        sources={answer.sources}\r\n                        downloadSource={downloadSource}\r\n                    />\r\n                </div>\r\n            ))}\r\n\r\n            {answerId ? (\r\n                <AnswerPopup\r\n                    answerId={answerId}\r\n                    setAnswerId={setAnswerId}\r\n                    downloadSource={downloadSource}\r\n                />\r\n            ) : null}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Answers;\r\n","D:\\projekti\\pharma-app\\app\\src\\components\\knowledge-repository\\components\\question-answer\\components\\AnswerPopup.js",[],"D:\\projekti\\pharma-app\\app\\src\\components\\knowledge-repository\\components\\document-repository\\components\\TableHeaders.js",[],"D:\\projekti\\pharma-app\\app\\src\\utils\\popup\\components\\add-documents\\AddDocuments.js",[],"D:\\projekti\\pharma-app\\app\\src\\utils\\popup\\components\\add-documents\\functions\\getTitleFromRtfFile.js",[],"D:\\projekti\\pharma-app\\app\\src\\utils\\popup\\components\\add-documents\\functions\\processTitleData.js",[],"D:\\projekti\\pharma-app\\app\\src\\components\\knowledge-repository\\components\\document-repository\\components\\Documents.js",["256","257"],"import React, { useState, useEffect } from 'react'\r\nimport downloadFile from '../../../../../utils/functions/downloadFile';\r\n\r\nimport getDocuments from '../functions/getDocuments';\r\n\r\nfunction Documents({\r\n    initData,\r\n    filters,\r\n    refresh,\r\n    changeState\r\n}) {\r\n    const [documents, setDocuments] = useState([]);\r\n\r\n    useEffect(() => {\r\n        getDocuments(\r\n            initData.brandId,\r\n            initData.indicationId,\r\n            filters,\r\n            setDocuments\r\n        );\r\n    }, [filters]);\r\n\r\n    useEffect(() => {\r\n        if(refresh) {\r\n            getDocuments(\r\n                initData.brandId,\r\n                initData.indicationId,\r\n                filters,\r\n                setDocuments\r\n            );\r\n\r\n            changeState({refresh: false});\r\n        }\r\n    }, [refresh]);\r\n\r\n    const downloadDocument = (e) => {\r\n        const document = JSON.parse(e.target.dataset.document)[0];\r\n        \r\n        downloadFile(\r\n            initData.brandId,\r\n            initData.indicationId,\r\n            \"documents\",\r\n            document.path,\r\n            document.name\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div id=\"table-rows\">\r\n            {documents.map(document => (\r\n                <div key={document.id} className=\"table-row\">\r\n                    <div className=\"table-column title\">\r\n                        <p\r\n                            data-document={document.document}\r\n                            onClick={downloadDocument}\r\n                        >{document.title}</p>\r\n                    </div>\r\n                    <div className=\"table-column\">\r\n                        <span>{document.cohort}</span>\r\n                    </div>\r\n                    <div className=\"table-column\">\r\n                        <span>{document.analysis_set}</span>\r\n                    </div>\r\n                    <div className=\"table-column\">\r\n                        <span>{document.data_cutoff_date}</span>\r\n                    </div>\r\n                    <div className=\"table-column\">\r\n                        <span>{document.endpoint}</span>\r\n                    </div>\r\n                </div>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Documents\r\n","D:\\projekti\\pharma-app\\app\\src\\components\\knowledge-repository\\components\\document-repository\\functions\\getDocuments.js",[],"D:\\projekti\\pharma-app\\app\\src\\utils\\functions\\readFileSync.js",[],"D:\\projekti\\pharma-app\\app\\src\\utils\\popup\\components\\FilePreview.js",[],{"ruleId":"258","replacedBy":"259"},{"ruleId":"260","replacedBy":"261"},{"ruleId":"262","severity":1,"message":"263","line":35,"column":8,"nodeType":"264","endLine":35,"endColumn":23,"suggestions":"265"},{"ruleId":"262","severity":1,"message":"266","line":43,"column":8,"nodeType":"264","endLine":43,"endColumn":22,"suggestions":"267"},{"ruleId":"262","severity":1,"message":"268","line":58,"column":8,"nodeType":"264","endLine":58,"endColumn":10,"suggestions":"269"},{"ruleId":"262","severity":1,"message":"270","line":74,"column":8,"nodeType":"264","endLine":74,"endColumn":23,"suggestions":"271"},{"ruleId":"262","severity":1,"message":"272","line":95,"column":8,"nodeType":"264","endLine":95,"endColumn":20,"suggestions":"273"},{"ruleId":"262","severity":1,"message":"274","line":30,"column":8,"nodeType":"264","endLine":30,"endColumn":10,"suggestions":"275"},{"ruleId":"276","severity":1,"message":"277","line":1,"column":1,"nodeType":"278","endLine":14,"endColumn":3},{"ruleId":"258","replacedBy":"279"},{"ruleId":"260","replacedBy":"280"},{"ruleId":"262","severity":1,"message":"281","line":51,"column":8,"nodeType":"264","endLine":51,"endColumn":10,"suggestions":"282"},{"ruleId":"262","severity":1,"message":"281","line":50,"column":8,"nodeType":"264","endLine":50,"endColumn":10,"suggestions":"283"},{"ruleId":"262","severity":1,"message":"281","line":61,"column":8,"nodeType":"264","endLine":61,"endColumn":17,"suggestions":"284"},{"ruleId":"285","severity":1,"message":"286","line":7,"column":8,"nodeType":"287","messageId":"288","endLine":7,"endColumn":20},{"ruleId":"262","severity":1,"message":"281","line":29,"column":8,"nodeType":"264","endLine":29,"endColumn":17,"suggestions":"289"},{"ruleId":"262","severity":1,"message":"290","line":42,"column":8,"nodeType":"264","endLine":42,"endColumn":17,"suggestions":"291"},{"ruleId":"292","severity":1,"message":"293","line":66,"column":13,"nodeType":"294","endLine":71,"endColumn":15},{"ruleId":"295","severity":1,"message":"296","line":66,"column":13,"nodeType":"294","endLine":71,"endColumn":15},{"ruleId":"262","severity":1,"message":"281","line":21,"column":8,"nodeType":"264","endLine":21,"endColumn":17,"suggestions":"297"},{"ruleId":"262","severity":1,"message":"290","line":34,"column":8,"nodeType":"264","endLine":34,"endColumn":17,"suggestions":"298"},"no-native-reassign",["299"],"no-negated-in-lhs",["300"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'state'. Either include it or remove the dependency array. You can also do a functional update 'setState(s => ...)' if you only need 'state' in the 'setState' call.","ArrayExpression",["301"],"React Hook useEffect has a missing dependency: 'indications'. Either include it or remove the dependency array.",["302"],"React Hook useEffect has missing dependencies: 'brandId', 'indicationId', 'initData.brandId', 'initData.indicationId', and 'state.year'. Either include them or remove the dependency array.",["303"],"React Hook useEffect has missing dependencies: 'initData.brandId', 'initData.indicationId', and 'state'. Either include them or remove the dependency array. You can also do a functional update 'setState(s => ...)' if you only need 'state' in the 'setState' call.",["304"],"React Hook useEffect has missing dependencies: 'data', 'initData.brandId', and 'initData.indicationId'. Either include them or remove the dependency array. You can also do a functional update 'setData(d => ...)' if you only need 'data' in the 'setData' call.",["305"],"React Hook useEffect has missing dependencies: 'brandId' and 'indicationId'. Either include them or remove the dependency array.",["306"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration",["299"],["300"],"React Hook useEffect has missing dependencies: 'initData.brandId' and 'initData.indicationId'. Either include them or remove the dependency array.",["307"],["308"],["309"],"no-unused-vars","'downloadFile' is defined but never used.","Identifier","unusedVar",["310"],"React Hook useEffect has missing dependencies: 'changeState', 'filters', 'initData.brandId', and 'initData.indicationId'. Either include them or remove the dependency array. If 'changeState' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["311"],"jsx-a11y/anchor-has-content","Anchors must have content and the content must be accessible by a screen reader.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md",["312"],["313"],"no-global-assign","no-unsafe-negation",{"desc":"314","fix":"315"},{"desc":"316","fix":"317"},{"desc":"318","fix":"319"},{"desc":"320","fix":"321"},{"desc":"322","fix":"323"},{"desc":"324","fix":"325"},{"desc":"326","fix":"327"},{"desc":"326","fix":"328"},{"desc":"329","fix":"330"},{"desc":"331","fix":"332"},{"desc":"333","fix":"334"},{"desc":"331","fix":"335"},{"desc":"333","fix":"336"},"Update the dependencies array to be: [state, state.refresh]",{"range":"337","text":"338"},"Update the dependencies array to be: [indicationId, indications]",{"range":"339","text":"340"},"Update the dependencies array to be: [brandId, indicationId, initData.brandId, initData.indicationId, state.year]",{"range":"341","text":"342"},"Update the dependencies array to be: [initData.brandId, initData.indicationId, state, state.refresh]",{"range":"343","text":"344"},"Update the dependencies array to be: [data, initData.brandId, initData.indicationId, state.year]",{"range":"345","text":"346"},"Update the dependencies array to be: [brandId, indicationId]",{"range":"347","text":"348"},"Update the dependencies array to be: [initData.brandId, initData.indicationId]",{"range":"349","text":"350"},{"range":"351","text":"350"},"Update the dependencies array to be: [initData.brandId, initData.indicationId, refresh]",{"range":"352","text":"353"},"Update the dependencies array to be: [filters, initData.brandId, initData.indicationId]",{"range":"354","text":"355"},"Update the dependencies array to be: [changeState, filters, initData.brandId, initData.indicationId, refresh]",{"range":"356","text":"357"},{"range":"358","text":"355"},{"range":"359","text":"357"},[898,913],"[state, state.refresh]",[1220,1234],"[indicationId, indications]",[1949,1951],"[brandId, indicationId, initData.brandId, initData.indicationId, state.year]",[2296,2311],"[initData.brandId, initData.indicationId, state, state.refresh]",[2884,2896],"[data, initData.brandId, initData.indicationId, state.year]",[941,943],"[brandId, indicationId]",[1676,1678],"[initData.brandId, initData.indicationId]",[1622,1624],[1915,1924],"[initData.brandId, initData.indicationId, refresh]",[834,843],"[filters, initData.brandId, initData.indicationId]",[1129,1138],"[changeState, filters, initData.brandId, initData.indicationId, refresh]",[507,516],[806,815]]